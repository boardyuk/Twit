<?php
// $Id$

/**
 * @file
 * Twit module file.
 */

// Include the URL encoder
module_load_include('inc', 'twit', 'twit');

/**
 * Grab the tweets and save them to the json file
 * @param twitter username
 * @param amount of tweets to grab
 * @return the local json file contents
 */
function savetweets($username, $count) {
  // Set the file name
  $dir = drupal_realpath('public://');
  $local_file = $dir . '/' . $username . '.json';

  // See if the file exists and when it was updated last
  // and if not create the file then return the file
  if (is_file($local_file)) {
    $time_lapse = (strtotime("now") - filemtime($local_file));
    if ($time_lapse > 600) {
      $feed_grab = file_get_contents('http://twitter.com/status/user_timeline/' . $username . '.json?count=' . $count . '');
      // Check for an error before writing the file
      if (strlen($feed_grab) > 100) {
        file_put_contents($local_file, $feed_grab);
      }
    }
  }
  else {
    $feed_grab = file_get_contents('http://twitter.com/status/user_timeline/' . $username . '.json?count=' . $count . '');
    // Check for an error before writing the file
    if (strlen($feed_grab) > 100) {
      file_put_contents($local_file, $feed_grab);
    }
  }
  // Return the file
  return $local_file;
} // function savetweets

/**
* Implementation of system_settings_form().
* 
*/
function twit_admin() {
  $form = array();

  $form['twit_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username of twitter account'),
    '#default_value' => variable_get('twit_user'),
    '#size' => 25,
    '#maxlength' => 25,
    '#description' => t("The user account of the twitter account being used for the site feed with the @."),
    '#required' => TRUE,
  );
  $form['twit_tweets'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of tweets to show'),
    '#default_value' => variable_get('twit_tweets', '5'),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("The number of tweets being shown on the site feed."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
} // function twit_admin

/**
* Implementation of hook_menu().
* 
*/
function twit_menu() {
  $items = array();

  $items['admin/settings/twit'] = array(
    'title' => 'Twit module settings',
    'description' => 'Set the twitter account for Twit to function',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twit_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
} // function twit_menu

/**
* Display help and module information
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for the path
*/
function twit_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#twit":
      $output = '<p>' . t("Display recent tweets for a twitter account, currently hard-coded in the module code.") . '</p>';
      break;
  }
  return $output;
} // function twit_help

/**
* Implementation of hook_block_info().
*/
function twit_block_info() {
  $blocks['twit'] = array(
    'info' => t('Twit'),
  );

  return $blocks;
} // function twit_block_info

/**
* Implementation of hook_block_view().
*/
function twit_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'twit':

      $block_content = '';

      if (variable_get('twit_user') == '') {
        // no content
        $block['subject'] = 'Twit';
        $block['content'] = '<div class=\"text\">' . t('Please set the twitter username in the settings page in Site Configuration') . '</div>';

        return $block;
      }

      $json = file_get_contents(savetweets(variable_get('twit_user'), variable_get('twit_tweets', '5')));
      $decode = json_decode($json, TRUE);

      // Build the block content
      $block_content .= '<div class="tweets">';
      $count = count($decode);

      for ($i=0; $i < $count; $i++) {
        $block_content .= '<div class="tweet">';
        $block_content .= '<div class="text">' . MakeItLink::transform(t($decode[$i]['text'])) . '</div>';
        $block_content .= '<div class="created">' . t(date('F jS Y', strtotime($decode[$i]['created_at']))) . '</div>';
        /*if ($decode[$i][geo][coordinates][1]) {
          $block_content .= "<div class=\"geo\">Long = ".$decode[$i][geo][coordinates][1]."Lat = ".$decode[$i][geo][corrdinates][0]."</div>";
        }*/
        $block_content .= "</div>";
      }
      $block_content .= '<div class="follow"><a href="http://www.twitter.com/' . $decode[0]['user']['screen_name'] . '" target="_blank">Follow on Twitter</a></div>';
      $block_content .= '</div>';

      // check to see if there was any content before returning
      //  the block view
      if ($block_content == '') {
        // no content
        $block['subject'] = 'Twit';
        $block['content'] = '<div class="text">' . t('Sorry No Tweets yet') . '</div>';

        return $block;
      }
      // set up the block
      $block['subject'] = 'Twit';
      $block['content'] = $block_content;

      return $block;

    break;
  }
} // function twit_block_view